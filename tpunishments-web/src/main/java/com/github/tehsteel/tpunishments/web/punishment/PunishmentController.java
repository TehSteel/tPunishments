package com.github.tehsteel.tpunishments.web.punishment;

import com.github.tehsteel.tpunishments.core.punishment.Punishment;
import com.github.tehsteel.tpunishments.core.punishment.PunishmentId;
import com.github.tehsteel.tpunishments.core.punishment.PunishmentType;
import com.github.tehsteel.tpunishments.web.punishment.model.PunishmentEntity;
import com.github.tehsteel.tpunishments.web.punishment.model.PunishmentRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/v1/punishments")
@RequiredArgsConstructor
public class PunishmentController {

	@Autowired
	private final PunishmentService punishmentService;


	@PostMapping(value = "/create", consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Punishment> create(@RequestBody final PunishmentRequest punishmentRequest) {
		final PunishmentId punishmentId = new PunishmentId.Builder(punishmentRequest.getPunishmentType()).withAutoGeneratedId().build();

		if (punishmentService.getPunishmentRepository().findById(punishmentId).isPresent())
			return new ResponseEntity<>(HttpStatus.CONFLICT);

		if (punishmentService.getActivePunishmentByType(punishmentRequest.getUuid(), punishmentRequest.getPunishmentType()) != null) {
			return new ResponseEntity<>(HttpStatus.CONFLICT);
		}

		final Punishment punishment = new Punishment.Builder(punishmentId, punishmentRequest.getPunishmentType(), punishmentRequest.getUuid())
				.withPunisher(punishmentRequest.getPunisher())
				.withStartTime(System.currentTimeMillis())
				.withEndTime(punishmentRequest.getEndTime())
				.withReason(punishmentRequest.getReason())
				.withPardoned(punishmentRequest.isPardoned())
				.withPardonInitiatorUuid(punishmentRequest.getPardonInitiatorUuid())
				.withPardonReason(punishmentRequest.getPardonReason())
				.build();

		final PunishmentEntity punishmentEntity = new PunishmentEntity();

		punishmentEntity.setPunishmentId(punishmentId);
		punishmentEntity.setPunishment(punishment);

		punishmentService.insertPunishment(punishmentEntity);

		return new ResponseEntity<>(punishment, HttpStatus.OK);
	}

	@PostMapping(value = "/update", consumes = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Punishment> update(@RequestBody final PunishmentRequest punishmentRequest) {
		final Punishment punishment = new Punishment.Builder(punishmentRequest.getPunishmentId(), punishmentRequest.getPunishmentType(), punishmentRequest.getUuid())
				.withPunisher(punishmentRequest.getPunisher())
				.withStartTime(punishmentRequest.getStartTime())
				.withEndTime(punishmentRequest.getEndTime())
				.withReason(punishmentRequest.getReason())
				.withPardoned(punishmentRequest.isPardoned())
				.withPardonInitiatorUuid(punishmentRequest.getPardonInitiatorUuid())
				.withPardonReason(punishmentRequest.getPardonReason())
				.build();

		final PunishmentEntity punishmentEntity = new PunishmentEntity();
		punishmentEntity.setPunishmentId(punishmentRequest.getPunishmentId());
		punishmentEntity.setPunishment(punishment);
		punishmentService.insertPunishment(punishmentEntity);

		return new ResponseEntity<>(punishment, HttpStatus.OK);
	}

	@GetMapping(value = "/getActivePunishmentByUuid", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Punishment> getActivePunishmentByUuid(@RequestParam final UUID uuid, @RequestParam final PunishmentType punishmentType) {
		final PunishmentEntity punishmentEntity = punishmentService.getActivePunishmentByType(uuid, punishmentType);


		if (punishmentEntity != null && punishmentEntity.getPunishment() != null) {
			return new ResponseEntity<>(punishmentEntity.getPunishment(), HttpStatus.OK);
		} else {
			return new ResponseEntity<>(null, HttpStatus.OK);
		}
	}


	@GetMapping(value = "/get", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<Punishment> getActivePunishmentByUuid(@RequestParam final PunishmentId punishmentId) {
		final PunishmentEntity punishment = punishmentService.getPunishmentRepository().findById(punishmentId).orElse(null);
		if (punishment != null)
			return new ResponseEntity<>(punishment.getPunishment(), HttpStatus.OK);
		else
			return new ResponseEntity<>(null, HttpStatus.OK);
	}

	@GetMapping(value = "/getAllPunishmentsByUuid", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<List<Punishment>> getActivePunishmentByUuid(@RequestParam final UUID uuid) {
		final List<Punishment> punishments = new ArrayList<>();

		punishmentService.getAllPunishments(uuid).forEach(punishmentEntity -> punishments.add(punishmentEntity.getPunishment()));

		return new ResponseEntity<>(punishments, HttpStatus.OK);
	}
}


